---
layout: default.liquid
title: Datatypes
---

<h1>Datatypes</h1>
<p>In this documentation, we consider a datatype to be any class or primative that typically stores one value. While such a datatype could contain a pointer/handle to a more complex type that may store many values (in which case the handle itself is the single value the datetype contains), the types documented here do not directly contain more than one piece of data be that a string of text, a dynamically typed handle or just a simple number.</p>
<h2>Any</h2>
<h2>Ref</h2>
<h2>String</h2>
<h3>Methods</h3>
<h4>ends_with</h4>
<p>Determines if a string ends with another string.</p>
<p>bool string::ends_with(string str);</p>
<h5>Arguments:</h5>
<ul>
<li>string str: the string to look for.</li>
</ul>
<h5>Returns:</h5>
<p>bool: true if the string ends with the specified search, false if not.</p>
<h5>Example:</h5>
<pre><code>void main() {
	string suffix = &quot;test&quot;;
	string text = input_box(&quot;Test&quot;, &quot;Enter a string&quot;);
	if (text.is_empty()) {
		alert(&quot;Info&quot;, &quot;Nothing was entered.&quot;);
		exit();
	}
	if (text.ends_with(suffix))
		alert(&quot;Info&quot;, &quot;The entered string ends with &quot; + suffix);
	else
		alert(&quot;Info&quot;, &quot;The entered string does not end with &quot; + suffix);
}
</code></pre>
<h4>is_empty</h4>
<p>Check to see if a string is empty.</p>
<p>bool string::is_empty();</p>
<h5>Returns:</h5>
<p>True if the string is empty; false otherwise.</p>
<h5>Remarks:</h5>
<p>An alternative method of obtaining the same result is using, for example:</p>
<pre><code>if (my_string == &quot;&quot;)
</code></pre>
<h5>Example:</h5>
<pre><code>void main() {
	string test = input_box(&quot;String is Empty Tester&quot;, &quot;Enter a string.&quot;);
	if (test.is_empty())
		alert(&quot;String is Empty Tester&quot;, &quot;The string appears to be empty.&quot;);
	else
		alert(&quot;String is Empty Tester&quot;, &quot;The string isn't empty.&quot;);
}
</code></pre>
<h4>is_lower</h4>
<p>Checks whether a string is completely lowercase.</p>
<p>bool string::is_lower(string encoding = &quot;UTF8&quot;);</p>
<h5>Arguments:</h5>
<ul>
<li>string encoding = &quot;UTF8&quot;: The encoding to check against, with the UTF8 encoding being cached for speed.</li>
</ul>
<h5>Returns:</h5>
<p>bool: true if the input string is lowercase.</p>
<h5>Remarks:</h5>
<p>This function only returns true if the string contains only lowercase characters in the given encoding. If a single uppercase or punctuation character is encountered, this function will return false.</p>
<p>If this function is called on a string that contains data that is not in the specified encoding, the results are undefined.</p>
<h5>Example:</h5>
<pre><code>void main() {
	alert(&quot;example&quot;, &quot;HELLO&quot;.is_lower()); // Should show tfalse.
	string input = input_box(&quot;example&quot;, &quot;enter a string&quot;);
	if(input.is_empty())
		exit();
	if(input.is_lower())
		alert(&quot;example&quot;, &quot;you typed a lowercase string&quot;);
	else
		alert(&quot;example&quot;, &quot;you did not type a lowercase string&quot;);
}
</code></pre>
<h4>is_punctuation</h4>
<p>Checks whether a string contains only punctuation characters and nothing else.</p>
<p>bool string::is_punctuation(string encoding = &quot;UTF8&quot;);</p>
<h5>Arguments:</h5>
<ul>
<li>string encoding = &quot;UTF8&quot;: The encoding to check against, with the UTF8 encoding being cached for speed.</li>
</ul>
<h5>Returns:</h5>
<p>bool: true if the input string contains only punctuation characters.</p>
<h5>Remarks:</h5>
<p>This function only returns true if the string contains only punctuation characters in the given encoding. If a single alphanumeric or other non-punctuation character is encountered, this function will return false.</p>
<p>If this function is called on a string that contains data that is not in the specified encoding, the results are undefined.</p>
<h5>Example:</h5>
<pre><code>void main() {
	alert(&quot;example&quot;, &quot;.?!&quot;.is_punctuation()); // Should show true.
	string input = input_box(&quot;example&quot;, &quot;enter a string&quot;);
	if(input.is_empty())
		exit();
	if(input.is_punctuation())
		alert(&quot;example&quot;, &quot;you typed a string that contains only punctuation characters&quot;);
	else
		alert(&quot;example&quot;, &quot;this string contains more than just punctuation&quot;);
}
</code></pre>
<h4>is_upper</h4>
<p>Checks whether a string is completely uppercase.</p>
<p>bool string::is_upper(string encoding = &quot;UTF8&quot;);</p>
<h5>Arguments:</h5>
<ul>
<li>string encoding = &quot;UTF8&quot;: The encoding to check against, with the UTF8 encoding being cached for speed.</li>
</ul>
<h5>Returns:</h5>
<p>bool: true if the input string is uppercase.</p>
<h5>Remarks:</h5>
<p>This function only returns true if the string contains only uppercase characters in the given encoding. If a single lowercase or punctuation character is encountered, this function will return false.</p>
<p>If this function is called on a string that contains data that is not in the specified encoding, the results are undefined.</p>
<h5>Example:</h5>
<pre><code>void main() {
	alert(&quot;example&quot;, &quot;HELLO&quot;.is_upper()); // Should show true.
	string input = input_box(&quot;example&quot;, &quot;enter a string&quot;);
	if(input.is_empty())
		exit();
	if(input.is_upper())
		alert(&quot;example&quot;, &quot;you typed an uppercase string&quot;);
	else
		alert(&quot;example&quot;, &quot;you did not type an uppercase string&quot;);
}
</code></pre>
<h4>length</h4>
<p>Returns the length (how large a string is).</p>
<p>uint string::length();</p>
<h5>returns:</h5>
<p>uint: The length of a string.</p>
<h5>Remarks:</h5>
<p>Note: This returns the length in bytes, rather than characters of any given text encoding.</p>
<h5>Example:</h5>
<pre><code>void main() {
	string test = input_box(&quot;String Length Tester&quot;, &quot;Enter a string to see its length.&quot;);
	if (test.length() &lt;= 0) {
		alert(&quot;String Length Tester&quot;, &quot;You appear to have provided an empty string!&quot;);
	}
	else if (test.length() == 1) {
		alert(&quot;String Length Tester&quot;, &quot;You appear to have only provided a single character!&quot;);
	}
	else {
		alert(&quot;String Length Tester&quot;, &quot;The provided string is &quot; + test.length()+&quot; characters!&quot;);
	}
}
</code></pre>
<h4>reverse</h4>
<p>Reverse a string.</p>
<p>string string::reverse(string encoding = &quot;UTF8&quot;);</p>
<h5>Arguments:</h5>
<ul>
<li>string encoding = &quot;UTF8&quot;: The string's encoding, with UTF8 cached for speed.</li>
</ul>
<h5>Returns:</h5>
<p>string: The specified string in reverse.</p>
<h5>Remarks:</h5>
<p>This function reverses the characters of a string based on a given encoding. To reverse the raw bytes of a string, for example if you are operating on binary data, see the reverse_bytes function instead.</p>
<h5>Example:</h5>
<pre><code>void main() {
	string text = input_box(&quot;Text&quot;, &quot;Enter some text to reverse.&quot;);
	if (text.is_empty()) {
		alert(&quot;Info&quot;, &quot;nothing was entered.&quot;);
		exit();
	}
	string result = text.reverse();
	alert(&quot;Reversed string&quot;, result);
}
</code></pre>
<h4>reverse_bytes</h4>
<p>Reverses the raw bytes contained within a string.</p>
<p>string string::reverse_bytes();</p>
<h5>Returns:</h5>
<p>string: A copy of the string with it's bytes reversed.</p>
<h5>Remarks:</h5>
<p>If you want to reverse the characters within a string given an encoding such as UTF8, use the reverse method instead.</p>
<h5>Example:</h5>
<pre><code>void main() {
	string raw = hex_to_string(&quot;1a2b3c4d&quot;);
	raw = raw.reverse_bytes();
	alert(&quot;reverse_bytes&quot;, string_to_hex(raw)); // Should show 4D3C2B1A.
	// Lets make it clear how this function differs from string::reverse. We'll make a string of emojis and show the results of both methods.
	string emojis = &quot;ü¶üü¶óüêúüêùüêûü¶Çüï∑&quot;;
	alert(&quot;emojis reversed propertly&quot;, emojis.reverse()); // string::reverse takes the UTF8 encoding into account.
	alert(&quot;broken emojis&quot;, emojis.reverse_bytes()); // This string no longer contains valid character sequences, and so the emoticons will most certainly not show correctly. Aww you can see if you runn this example that it seems even string::reverse_bytes() can't quite get rid of mosquitos though... üòÄ
}
</code></pre>
<h4>starts_with</h4>
<p>Determines if a string starts with another string.</p>
<p>bool string::starts_with(string str);</p>
<h5>Arguments:</h5>
<ul>
<li>string str: the string to look for.</li>
</ul>
<h5>Returns:</h5>
<p>bool: true if the string starts with the specified search, false if not.</p>
<h5>Example:</h5>
<pre><code>void main() {
	string prefix = &quot;abc&quot;;
	string text = input_box(&quot;Test&quot;, &quot;Enter a string&quot;);
	if (text.is_empty()) {
		alert(&quot;Info&quot;, &quot;Nothing was entered.&quot;);
		exit();
	}
	if (text.starts_with(prefix))
		alert(&quot;Info&quot;, &quot;The entered string starts with &quot; + prefix);
	else
		alert(&quot;Info&quot;, &quot;The entered string does not start with &quot; + prefix);
}
</code></pre>
<h4>trim_whitespace</h4>
<p>Trims any and all whitespace from the beginning and end of a string.</p>
<p>string string::trim_whitespace();</p>
<h5>Returns:</h5>
<p>string: the specified string, with any trailing/leading whitespace removed.</p>
<h5>Remarks:</h5>
<p>Any and all whitespace, including the tab character and new lines, will be removed.</p>
<h5>Example:</h5>
<pre><code>void main() {
	string text = input_box(&quot;String&quot;, &quot;Enter a string&quot;);
	if (text.is_empty()) {
		alert(&quot;Info&quot;, &quot;You didn't enter a string.&quot;);
		exit();
	}
	string result = text.trim_whitespace();
	alert(&quot;Trimmed string&quot;, result);
}
</code></pre>
<h4>trim_whitespace_left</h4>
<p>Trims any and all whitespace from the left side of a string.</p>
<p>string string::trim_whitespace_left();</p>
<h5>Returns:</h5>
<p>string: the specified string, with the whitespace removed from the left side.</p>
<h5>Remarks:</h5>
<p>Any and all whitespace, including the tab character and new lines, will be removed.</p>
<h5>Example:</h5>
<pre><code>void main() {
	string text = input_box(&quot;String&quot;, &quot;Enter a string&quot;);
	if (text.is_empty()) {
		alert(&quot;Info&quot;, &quot;You didn't enter a string.&quot;);
		exit();
	}
	string result = text.trim_whitespace_left();
	alert(&quot;Trimmed string&quot;, result);
}
</code></pre>
<h4>trim_whitespace_right</h4>
<p>Trims any and all whitespace from the right side of a string.</p>
<p>string string::trim_whitespace_right();</p>
<h5>Returns:</h5>
<p>string: the specified string, with the whitespace removed from the right side.</p>
<h5>Remarks:</h5>
<p>Any and all whitespace, including the tab character and new lines, will be removed.</p>
<h5>Example:</h5>
<pre><code>void main() {
	string text = input_box(&quot;String&quot;, &quot;Enter a string&quot;);
	if (text.is_empty()) {
		alert(&quot;Info&quot;, &quot;You didn't enter a string.&quot;);
		exit();
	}
	string result = text.trim_whitespace_right();
	alert(&quot;Trimmed string&quot;, result);
}
</code></pre>
<h2>Var</h2>
