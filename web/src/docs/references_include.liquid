---
layout: default.liquid
title: Bundled Includes API
---

<h1>Bundled Includes API</h1>
<h2>Bgt Compatibility Layer (Bgt_Compat.Nvgt)</h2>
<h2>Dictionary Retrieval (Dget.Nvgt)</h2>
<h3>Dictionary retrieval functions</h3>
<p>The way you get values out of Angelscript dictionaries by default is fairly annoying, mainly due to its usage of out values instead of returning them. Hence this include, which attempts to simplify things.</p>
<h3>Functions</h3>
<h4>dgetb</h4>
<p>Get a boolean value out of a dictionary.</p>
<p><code>bool dgetn(dictionary@ the_dictionary, string key, bool def = false);</code></p>
<h5>Arguments:</h5>
<ul>
<li>dictionary@ the_dictionary: a handle to the dictionary to get the value from.</li>
<li>string key: the key of the value to look up.</li>
<li>bool def = false: the value to return if the key wasn't found.</li>
</ul>
<h5>Returns:</h5>
<p>bool: the value for the particular key in the dictionary, or the default value if not found.</p>
<h4>dgetn</h4>
<p>Get a numeric value out of a dictionary.</p>
<p><code>double dgetn(dictionary@ the_dictionary, string key, double def = 0.0);</code></p>
<h5>Arguments:</h5>
<ul>
<li>dictionary@ the_dictionary: a handle to the dictionary to get the value from.</li>
<li>string key: the key of the value to look up.</li>
<li>double def = 0.0: the value to return if the key wasn't found.</li>
</ul>
<h5>Returns:</h5>
<p>double: the value for the particular key in the dictionary, or the default value if not found.</p>
<h4>dgets</h4>
<p>Get a string value out of a dictionary.</p>
<p><code>string dgets(dictionary@ the_dictionary, string key, string def = 0.0);</code></p>
<h5>Arguments:</h5>
<ul>
<li>dictionary@ the_dictionary: a handle to the dictionary to get the value from.</li>
<li>string key: the key of the value to look up.</li>
<li>string def = &quot;&quot;: the value to return if the key wasn't found.</li>
</ul>
<h5>Returns:</h5>
<p>string: the value for the particular key in the dictionary, or the default value if not found.</p>
<h4>dgetsl</h4>
<p>Get a string array out of a dictionary.</p>
<p><code>string[] dgetsl(dictionary@ the_dictionary, string key, string[] def = []);</code></p>
<h5>Arguments:</h5>
<ul>
<li>dictionary@ the_dictionary: a handle to the dictionary to get the value from.</li>
<li>string key: the key of the value to look up.</li>
<li>string[] def = []: the value to return if the key wasn't found.</li>
</ul>
<h5>Returns:</h5>
<p>string[]: the value for the particular key in the dictionary, or the default value if not found.</p>
<h5>Remarks:</h5>
<p>The default value for this function is a completely empty (but initialized) string array.</p>
<h2>File Reading (File_Contents.Nvgt)</h2>
<h3>File Contents Library</h3>
<p>Fecilitates the easy reading and writing of strings in files.</p>
<h3>Functions</h3>
<h4>get_file_contents</h4>
<p>Reads the contents of a file as a string.</p>
<p>string get_file_contents(string filename)</p>
<h5>Arguments:</h5>
<ul>
<li>string filename: the name of the file to read.</li>
</ul>
<h5>Returns:</h5>
<p>The contents of the file on success, an empty string on failure.</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;file_contents.nvgt&quot;
void main() {
	string filename = input_box(&quot;Filename&quot;, &quot;Enter the name of a file to read.&quot;, &quot;&quot;);
	string contents = get_file_contents(filename);
	if (contents == &quot;&quot;)
		alert(&quot;Example&quot;, &quot;Either the file was not found, or it contained no text.&quot;);
	else {
		clipboard_set_text(contents);
		alert(&quot;Example&quot;, &quot;The contents of the file is now on your clipboard.&quot;);
	}
}
</code></pre>
<h4>put_file_contents</h4>
<p>Writes a string to a file.</p>
<p>bool put_file_contents(string filename, string content, bool append = false)</p>
<h5>Arguments:</h5>
<ul>
<li><p>string filename: the name of the file to write to.</p>
</li>
<li><p>string content: the content to write.</p>
</li>
<li><p>bool append = false: specifies whether the current contents of the file should be overwritten when writing.</p>
</li>
</ul>
<h5>Returns:</h5>
<p>true on success, false on failure.</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;file_contents.nvgt&quot;
void main() {
	if (!put_file_contents(&quot;example.txt&quot;, &quot;This is an example&quot;))
		alert(&quot;Example&quot;, &quot;Failed to write the file.&quot;);
	else
		alert(&quot;Example&quot;, &quot;Successfully wrote the example file.&quot;);
}
</code></pre>
<h2>Instance Management (Instance.Nvgt)</h2>
<h2>Music System (Music.Nvgt)</h2>
<h2>Size Conversions (Size.Nvgt)</h2>
<h3>Size Conversions Include</h3>
<p>This include provides a simple function to convert an unsigned int to a human readable size. It also provides a few very useful size constants.</p>
<h3>Functions</h3>
<h4>size_to_string</h4>
<p>Converts an unsigned int into a human-readable size.</p>
<p>string size_to_string(uint64 size, uint8 round_place = 2);</p>
<h5>Arguments:</h5>
<ul>
<li><p>uint64 size: the size to convert.</p>
</li>
<li><p>uint8 round_place = 2: how many decimal places to round the sizes to.</p>
</li>
</ul>
<h5>Returns:</h5>
<p>The given size as a human-readable string.</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;size.nvgt&quot;
void main() {
	uint64[] sizes = {193, 3072, 1048576, 3221225472, 1099511627776, 35184372088832};
	string results;
	for (uint i = 0; i &lt; sizes.length(); i++)
		results += sizes[i] + &quot; bytes = &quot; + size_to_string(sizes[i]) + &quot;,\n&quot;;
	// Strip off the trailing comma and new line.
	results.trim_whitespace_right_this();
	results.erase(results.length() - 1);
	alert(&quot;Results&quot;, results);
}
</code></pre>
<h3>Global Properties</h3>
<h4>GIGABYTES</h4>
<p>The number of bytes in a gigabyte.</p>
<p>const uint GIGABYTES;</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;size.nvgt&quot;
void main() {	
	alert(&quot;Info&quot;, &quot;A gigabyte is &quot; + GIGABYTES + &quot; bytes&quot;);
}
</code></pre>
<h4>KILOBYTES</h4>
<p>The number of bytes in a kilobyte.</p>
<p>const uint KILOBYTES;</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;size.nvgt&quot;
void main() {
	alert(&quot;Info&quot;, &quot;10 kilobytes is &quot; + 10 * KILOBYTES + &quot; bytes&quot;);
}
</code></pre>
<h4>MEGABYTES</h4>
<p>The number of bytes in a megabyte.</p>
<p>const uint MEGABYTES;</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;size.nvgt&quot;
void main() {
	alert(&quot;Info&quot;, &quot;19 megabytes is &quot; + 19 * MEGABYTES + &quot; bytes&quot;);
}
</code></pre>
<h4>SIZE_TO_STRING_UNITS</h4>
<p>String array of all the supported units for size_to_string().</p>
<p>const array<string> SIZE_TO_STRING_UNITS;</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;size.nvgt&quot;
void main() {
	string possible_units;
	for (uint i = 0; i &lt; SIZE_TO_STRING_UNITS.length(); i++)
		possible_units += SIZE_TO_STRING_UNITS[i] + &quot;,\n&quot;;
	// Strip off the trailing comma and new line.
	possible_units.trim_whitespace_right_this();
	possible_units.erase(possible_units.length() - 1);
	alert(&quot;Info&quot;, &quot;The possible units are: &quot; + possible_units + &quot;.&quot;);
}
</code></pre>
<h4>TERABYTES</h4>
<p>The number of bytes in a terabyte.</p>
<p>const uint TERABYTES;</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;size.nvgt&quot;
void main() {	
	alert(&quot;Info&quot;, &quot;A terabyte is &quot; + TERABYTES + &quot; bytes&quot;);
}
</code></pre>
<h2>Token Generation (Token_Gen.Nvgt)</h2>
<h3>Token generation include</h3>
<p>Allows you to easily generate random strings of characters of any length.</p>
<h3>Functions</h3>
<h4>generate_token</h4>
<p>Generates a string of random characters, or token.</p>
<p>string generate_token(int token_length)</p>
<h5>Arguments:</h5>
<ul>
<li>int token_length: the length of the token to generate.</li>
</ul>
<h5>returns:</h5>
<p>String: a random token.</p>
<h5>Remarks:</h5>
<p>The characters used to generate the token are: &quot;1234567890abcdefthijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.</p>
<h5>Example:</h5>
<pre><code>&amp;#35;include &quot;token_gen.nvgt&quot;
void main() {
	alert(&quot;Info&quot;, &quot;Your token is: &quot; + generate_token(10));
}
</code></pre>
