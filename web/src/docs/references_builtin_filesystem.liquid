---
layout: default.liquid
title: Filesystem
---

<h1>Filesystem</h1>
<h2>Functions</h2>
<h3>directory_create</h3>
<p>Creates a directory if it doesn't already exist.</p>
<p>bool directory_create(string directory);</p>
<h4>Arguments:</h4>
<ul>
<li>string directory: path to the directory to create (can be nested, relative or absolute).</li>
</ul>
<h4>Returns:</h4>
<p>true if the directory was successfully created or already exists, false otherwise.</p>
<h4>Example:</h4>
<pre><code>void main() {
	if (directory_exists(&quot;test&quot;)) {
		alert(&quot;Info&quot;, &quot;The test directory already exists; nothing to do&quot;);
		exit();
	}
	if (directory_create(&quot;test&quot;)) {
		alert(&quot;Info&quot;, &quot;Directory created. Deleting...&quot;);
		alert(&quot;Info&quot;, directory_delete(&quot;test&quot;) ? &quot;Success&quot;: &quot;Fail&quot;);
	}
	else
		alert(&quot;Error&quot;, &quot;Couldn't create the directory.&quot;);
}
</code></pre>
<p>Deletes a directory.</p>
<p><code>bool directory_delete(string directory);</code></p>
<h4>Arguments:</h4>
<ul>
<li>string directory: the directory to delete.</li>
</ul>
<h4>Returns:</h4>
<p>true if the directory was successfully deleted, false otherwise.</p>
<h3>directory_exists</h3>
<p>Determine if a directory exists or not.</p>
<p>bool directory_exists(string directory);</p>
<h4>Arguments:</h4>
<ul>
<li>string directory: the directory whose existance will be checked (can be a relative or absolute path).</li>
</ul>
<h4>Returns:</h4>
<p>true if the directory exists, false otherwise.</p>
<h4>Example:</h4>
<pre><code>void main() {
	alert(&quot;Directory exists&quot;, directory_exists(&quot;test&quot;) ? &quot;There is a test folder in the current directory&quot; : &quot;There is not a test folder in the current directory&quot;);
}
</code></pre>
<h3>file_exists</h3>
<p>Check for the existence of a particular file.</p>
<p><code>bool file_exists(string file_path);</code></p>
<h4>Arguments:</h4>
<ul>
<li>string file_path: the path to the file to query.</li>
</ul>
<h4>Returns:</h4>
<p>bool: true if the file exists, false otherwise.</p>
<h2>Global Properties</h2>
<h3>DIRECTORY_APPDATA</h3>
<p>Property that returns the user's roaming application directory, which is usually where game data can be written to.</p>
<p>const string DIRECTORY_APPDATA;</p>
<h4>remarks:</h4>
<p>A slash character is already appended to the directory returned by this property.</p>
<p>This function may return different values depending on the operating system the application is being run on.</p>
<ul>
<li><p>On Windows, usually C:\Users%username%\appdata\roaming/.</p>
</li>
<li><p>on macOS, usually ~/Library/Preferences/.</p>
</li>
<li><p>on Linux, usually ~/.config/.</p>
</li>
</ul>
<p>In any case, the directory returned should be writable.</p>
<h4>Example:</h4>
<pre><code>void main() {
	alert(&quot;example&quot;, &quot;data for the game could be stored at &quot; + DIRECTORY_APPDATA + &quot;my_game/&quot;);
}
</code></pre>
