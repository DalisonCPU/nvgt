---
layout: default.liquid
title: Data Manipulation
---

<h1>Data Manipulation</h1>
<h2>Functions</h2>
<h3>ascii_to_character</h3>
<p>Return the character that corresponds to the given ascii value.</p>
<p>string ascii_to_character(uint8 ascii);</p>
<h4>Arguments:</h4>
<ul>
<li>uint8 ascii: the ascii value to convert.</li>
</ul>
<h4>Returns:</h4>
<p>string: the character for the given ascii value.</p>
<h4>Example:</h4>
<pre><code>void main() {
	uint8 ascii = parse_int(input_box(&quot;ASCII value&quot;, &quot;Enter the ascii value to convert.&quot;));
	alert(&quot;Info&quot;, ascii + &quot; has a value of &quot; + ascii_to_character(ascii));
}
</code></pre>
<h3>character_to_ascii</h3>
<p>Return the ascii value for the given character.</p>
<p>uint8 character_to_ascii(string character);</p>
<h4>Arguments:</h4>
<ul>
<li>string character: the character to convert.</li>
</ul>
<h4>Returns:</h4>
<p>uint8: the ascii value for the given character.</p>
<h4>Example:</h4>
<pre><code>void main() {
	string character = input_box(&quot;Character&quot;, &quot;Enter a character to convert&quot;);
	if (character.is_empty()) {
		alert(&quot;Error&quot;, &quot;You did not type anything.&quot;);
		exit();
	}
	if (character.length() != 1) { // The user typed more than one character.
		alert(&quot;Error&quot;, &quot;You must only type a single character.&quot;);
		exit();
	}
	alert(&quot;Info&quot;, character + &quot; has an ascii value of &quot; + character_to_ascii(character));
}
</code></pre>
<h3>join</h3>
<p>turn an array into a string, with each element being seperated by the given delimiter.</p>
<p>string join(string[] elements, string delimiter);</p>
<h4>Arguments:</h4>
<ul>
<li><p>string[] elements: the array to join.</p>
</li>
<li><p>string delimiter: the delimiter used to seperate each element in the array (can be empty).</p>
</li>
</ul>
<h4>Returns:</h4>
<p>string: the given array as a string.</p>
<h4>Example:</h4>
<pre><code>void main() {
	string[] names = {&quot;Sam&quot;, &quot;Quin&quot;, &quot;Patrick&quot;};
	string people = join(names, &quot;, &quot;);
	alert(&quot;Info&quot;, people);
}
</code></pre>
<h3>number_to_words</h3>
<p>Convert a number into its string equivalent, for example, one thousand four hundred and fifty six.</p>
<p>string number_to_words(int64 the_number, bool include_and = true);</p>
<h4>Arguments:</h4>
<ul>
<li><p>int64 the_number: the number to convert.</p>
</li>
<li><p>bool include_and = true: whether or not to include the word &quot;and&quot; in the output.</p>
</li>
</ul>
<h4>Returns:</h4>
<p>string: the specified number, converted to a readable string.</p>
<h4>Example:</h4>
<pre><code>void main() {
	int64 num = random(1000, 100000);
	string result = number_to_words(num);
	alert(&quot;Info&quot;, num + &quot; as a string is &quot; + result);
}
</code></pre>
<h3>string_base32_decode</h3>
<p>Decodes a string from base32.</p>
<p>string string_base32_decode(string the_data);</p>
<h4>Arguments:</h4>
<ul>
<li>string the_data: The data that is to be decoded.</li>
</ul>
<h4>Returns:</h4>
<p>String: The decoded string on success or an empty string on failure.</p>
<h4>Remarks:</h4>
<p>You can learn more about the base32 format <a href="https://en.wikipedia.org/wiki/Base32">here</a>.</p>
<h4>Example:</h4>
<pre><code>void main() {
	string text = input_box(&quot;Text&quot;, &quot;Enter the text to decode.&quot;);
	if (text.is_empty()) {
		alert(&quot;Error&quot;, &quot;You did not type any text.&quot;);
		exit();
	}
	alert(&quot;Info&quot;, string_base32_decode(text));
}
</code></pre>
<h3>string_base32_encode</h3>
<p>Encodes a string as base32.</p>
<p>string string_base32_encode(string the_data);</p>
<h4>Arguments:</h4>
<ul>
<li>string the_data: The data that is to be encoded.</li>
</ul>
<h4>Returns:</h4>
<p>String: The encoded string on success or an empty string on failure.</p>
<h4>Remarks:</h4>
<p>You can learn more about the base32 format <a href="https://en.wikipedia.org/wiki/Base32">here</a>.</p>
<h4>Example:</h4>
<pre><code>void main() {
	string text = input_box(&quot;Text&quot;, &quot;Enter the text to encode.&quot;);
	if (text.is_empty()) {
		alert(&quot;Error&quot;, &quot;You did not type any text.&quot;);
		exit();
	}
	alert(&quot;Info&quot;, string_base32_encode(text));
}
</code></pre>
<h3>string_base32_normalize</h3>
<p>Normalize a string to conform to the base32 spec.</p>
<p>string string_base32_normalize(string the_data);</p>
<h4>Arguments:</h4>
<ul>
<li>string the_data: the string to normalize.</li>
</ul>
<h4>Returns:</h4>
<p>string: the normalized string.</p>
<h4>Remarks:</h4>
<p>The primary thing this function does is to skip sepeerators, convert all letters to uppercase, and make sure the length is a multiple of 8.</p>
<p>To learn more about base32, click <a href="https://en.wikipedia.org/wiki/Base32">here</a>.</p>
<h4>Example:</h4>
<pre><code>void main() {
	string text = input_box(&quot;Text&quot;, &quot;Enter the text to normalize.&quot;);
	if (text.is_empty()) {
		alert(&quot;Error&quot;, &quot;You didn't type anything.&quot;);
		exit();
	}
	alert(&quot;Info&quot;, string_base32_normalize(text));
}
</code></pre>
<h3>string_base64_decode</h3>
<p>Decodes a string which has previously been encoded in base64.</p>
<p>string string_base64_decode(string the_data, string_base64_options options = STRING_BASE64_PADLESS);</p>
<h4>Arguments:</h4>
<ul>
<li><p>string the_data: The data that is to be decoded.</p>
</li>
<li><p>string_base64_options options = STRING_BASE64_PADLESS: A bitwise of options that control the behavior of the decoding (see remarks).</p>
</li>
</ul>
<h4>Returns:</h4>
<p>String: The decoded string on success or an empty string on failure.</p>
<h4>Remarks:</h4>
<p>The following options may be passed to the options argument of this function:</p>
<ul>
<li><p>STRING_BASE64_DEFAULT: The defaults passed to the string_base64_encode function.</p>
</li>
<li><p>STRING_BASE64_URL: Use base64 URL encoding as aposed to the / and = characters.</p>
</li>
<li><p>STRING_BASE64_PADLESS: Allows decoding even if the string does not end with = padding characters.</p>
</li>
</ul>
<p>You can learn more about base64 <a href="https://en.wikipedia.org/wiki/Base64">here.</a></p>
<h4>Example:</h4>
<pre><code>void main() {
	alert(&quot;example&quot;, string_base64_decode(&quot;aGVsbG8=&quot;)); // Should print &quot;hello&quot;.
}
</code></pre>
<h3>string_base64_encode</h3>
<p>Encodes a string as base64.</p>
<p>string string_base64_encode(string the_data, string_base64_options options = STRING_BASE64_DEFAULT);</p>
<h4>Arguments:</h4>
<ul>
<li><p>string the_data: The data that is to be encoded.</p>
</li>
<li><p>string_base64_options options = STRING_BASE64_DEFAULT: A bitwise of options that control the behavior of the encoding (see remarks).</p>
</li>
</ul>
<h4>Returns:</h4>
<p>String: The encoded string on success or an empty string on failure.</p>
<h4>Remarks:</h4>
<p>The following options may be passed to the options argument of this function:</p>
<ul>
<li><p>STRING_BASE64_DEFAULT: The default options (i.e. insert padding and do not use URL encoding).</p>
</li>
<li><p>STRING_BASE64_URL: Use base64 URL encoding as aposed to the / and = characters.</p>
</li>
<li><p>STRING_BASE64_PADLESS: Allows decoding even if the string does not end with = padding characters.</p>
</li>
</ul>
<p>You can learn more about base64 <a href="https://en.wikipedia.org/wiki/Base64">here.</a></p>
<h4>Example:</h4>
<pre><code>void main() {
	alert(&quot;example&quot;, string_base64_encode(&quot;Hello&quot;)); // Should print SGVsbG8=
}
</code></pre>
